A1 <- solve(A)
VbML <- - A1 / N
VbQML <- A1 %*% B %*% A1 / N
sebML <- sqrt(diag(VbML))
sebQML <- sqrt(diag(VbQML))
A
B
VbML
VbQML
sebML
sebQML
A1
lambda
h
optim$hessian
fitML@vcov
fitML@details$hessian
A <- - optim$hessian
B <- t(h) %*% h / N
A1 <- solve(A)
VbML <- - A1 / N
VbQML <- A1 %*% B %*% A1 / N
sebML <- sqrt(diag(VbML))
sebQML <- sqrt(diag(VbQML))
VbML
VbQML
sebML
sebQML
?nls
# c
fitNLS <- nls(y ~ exp(X), start = theta)
# c
fitNLS <- nls(y ~ exp(X[, 1] * theta1 + X[, 2] * theta2), start = list(theta1 = b[1], theta2 = b[2]))
fitNLS
fitNLS$m$conv()
fitNLS$convInfo
fitNLS$control
fitNLS$data
fitNLS$call
fitNLS$data
fitNLS$m$Rmat()
summary(fitNLS)
summary(fitML)
?dexp
?rep
sample(0, 2, replace = T)
R <- 1000
b_ML <- matrix(sample(0, R * 2, replace = T), R, 2)
b_NLS <- matrix(sample(0, R * 2, replace = T), R, 2)
for (i in 1:R) {
y1 <- rexp(N, rate = 1 / exp(x - 2))
data1 <- cbind(y1, X)
colnames(data) <- c("y", "x0", "x1")
b_ML[i, ] <- mle2(y1 ~ dexp(rate = exp(x0 * theta1 + x1 * theta2)), start = list(theta1 = 2, theta2 = - 1),
data = as.data.frame(data1))
b_NLS[i, ] <- nls(y1 ~ exp(X[, 1] * theta1 + X[, 2] * theta2), start = list(theta1 = 2, theta2 = - 1))
}
for (i in 1:R) {
y1 <- rexp(N, rate = 1 / exp(x - 2))
data1 <- cbind(y1, X)
colnames(data1) <- c("y", "x0", "x1")
b_ML[i, ] <- mle2(y1 ~ dexp(rate = exp(x0 * theta1 + x1 * theta2)), start = list(theta1 = 2, theta2 = - 1),
data = as.data.frame(data1))
b_NLS[i, ] <- nls(y1 ~ exp(X[, 1] * theta1 + X[, 2] * theta2), start = list(theta1 = 2, theta2 = - 1))
}
fitML
fitML@coef
coef(mle2(y1 ~ dexp(rate = exp(x0 * theta1 + x1 * theta2)), start = list(theta1 = 2, theta2 = - 1),
data = as.data.frame(data1)))
for (i in 1:R){
y1 <- rexp(N, rate = 1 / exp(x - 2))
data1 <- cbind(y1, X)
colnames(data1) <- c("y", "x0", "x1")
b_ML[i, ] <- coef(mle2(y1 ~ dexp(rate = exp(x0 * theta1 + x1 * theta2)), start = list(theta1 = 2, theta2 = - 1),
data = as.data.frame(data1)))
b_NLS[i, ] <- coefficients(nls(y1 ~ exp(X[, 1] * theta1 + X[, 2] * theta2),
start = list(theta1 = 2, theta2 = - 1)))
}
mean(b_ML)
dim(b_ML)
mean(b_ML[, 1])
mean(b_ML[, 2])
print(mean(b_ML[, 1]), mean(b_ML[, 2]), mean(b_NLS[, 1]). mean(b_NLS[, 2]))
print(mean(b_ML[, 1]), mean(b_ML[, 2]), mean(b_NLS[, 1]), mean(b_NLS[, 2]))
mean(b_ML[, 1]
mean(b_ML[, 1])
mean(b_ML[, 2])
mean(b_NLS[, 1])
mean(b_NLS[, 2]
)
fitNLS
# c
fitNLS <- nls(y ~ - exp(X[, 1] * theta1 + X[, 2] * theta2), start = list(theta1 = b[1], theta2 = b[2]))
fitNLS
# c
fitNLS <- nls(y ~  exp(- (X[, 1] * theta1 + X[, 2] * theta2)), start = list(theta1 = b[1], theta2 = b[2]))
fitNLS
print(mean(b_ML[, 1]), mean(b_ML[, 2]), mean(b_NLS[, 1]), mean(b_NLS[, 2]))
mean(b_ML[, 1])
mean(b_ML[, 2])
mean(b_NLS[, 1])
mean(b_NLS[, 2]))
mean(b_NLS[, 2])
beta <- 1
rho <- 0.5
r <- 3
pi_1 <- 1
pi <- c(pi_1, rep(0, r - 1))
pi
gamma_1 <- 0 # heteroskedasticity parameter
gamma <- c(gamma_1, rep(0, r -1))
?norm
?rnorm
cbind(rep(rnorm(N, 0, 1), r))
head(cbind(rep(rnorm(N, 0, 1), r)))
head(rep(rnorm(N, 0, 1), r))
beta <- 1
rho <- 0.5
r <- 3
pi_1 <- 1
pi <- c(pi_1, rep(0, r - 1))
gamma_1 <- 0 # heteroskedasticity parameter
gamma <- c(gamma_1, rep(0, r -1))
rep(rnorm(N, 0, 1), r)
N <- 100
rep(rnorm(N, 0, 1), r)
head(rep(rnorm(N, 0, 1), r))
dim(rep(rnorm(N, 0, 1), r))
length(rep(rnorm(N, 0, 1), r))
Z <- cbind(rnorm(N, 0, 1), r), rnorm(N, 0, 1), r), rnorm(N, 0, 1), r))
Z <- matrix(rnorm(N, 0, 1), N, r)
sigma <- exp(Z %*% gamma)
R <- 200
b_2SLS <- matrix(sample(0, R, replace = T), R, 1)
b_GMM <- matrix(sample(0, R, replace = T), R, 1)
b_EGMM <- matrix(sample(0, R, replace = T), R, 1)
b_OLS <- matrix(sample(0, R, replace = T), R, 1)
beta <- 1
rho <- 0.5
r <- 3
pi_1 <- 1
pi <- c(pi_1, rep(0, r - 1))
gamma_1 <- 0 # heteroskedasticity parameter
gamma <- c(gamma_1, rep(0, r -1))
N <- 100
Z <- matrix(rnorm(N, 0, 1), N, r)
sigma <- exp(Z %*% gamma)
# matrices for results
R <- 200
b_2SLS <- matrix(sample(0, R, replace = T), R, 1)
b_GMM <- matrix(sample(0, R, replace = T), R, 1)
b_EGMM <- matrix(sample(0, R, replace = T), R, 1)
b_OLS <- matrix(sample(0, R, replace = T), R, 1)
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- lm(y ~ x)
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% Z %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- coef(lm(y ~ x))
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% Z %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
coef(lm(y ~ x))
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- coef(lm(y ~ x))[2]
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% Z %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
t(Z) %*% Z
Z <- cbin(rnorm(N, 0, 1), rnorm(N, 0, 1), rnorm(N, 0, 1))
Z <- cbind(rnorm(N, 0, 1), rnorm(N, 0, 1), rnorm(N, 0, 1))
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- coef(lm(y ~ x))[2]
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% Z %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
t(Z) %*% Z
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- coef(lm(y ~ x))[2]
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
mean(b_OLS)
coef(lm(y ~ x))[2]
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- as.numeric(coef(lm(y ~ x))[2])
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
as.numeric(coef(lm(y ~ x))[2])
b_2SLS <- matrix(sample(0, R, replace = T), R, 1)
b_GMM <- matrix(sample(0, R, replace = T), R, 1)
b_EGMM <- matrix(sample(0, R, replace = T), R, 1)
b_OLS <- matrix(sample(0, R, replace = T), R, 1)
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- as.numeric(coef(lm(y ~ x))[2])
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
mean(b_OLS)
mean(b_2SLS)
gamma_1 <- 0.5 # heteroskedasticity parameter
gamma <- c(gamma_1, rep(0, r -1))
N <- 100
Z <- cbind(rnorm(N, 0, 1), rnorm(N, 0, 1), rnorm(N, 0, 1))
sigma <- exp(Z %*% gamma)
# matrices for results
R <- 200
b_2SLS <- matrix(sample(0, R, replace = T), R, 1)
b_GMM <- matrix(sample(0, R, replace = T), R, 1)
b_OLS <- matrix(sample(0, R, replace = T), R, 1)
b_EGMM <- matrix(sample(0, R, replace = T), R, 1)
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- as.numeric(coef(lm(y ~ x))[2])
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
mean(b_2SLS)
mean(e)
gamma_1 <- 0 # heteroskedasticity parameter
gamma <- c(gamma_1, rep(0, r -1))
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- as.numeric(coef(lm(y ~ x))[2])
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
mean(e)
gamma_1 <- 1 # heteroskedasticity parameter
gamma <- c(gamma_1, rep(0, r -1))
for (i in 1:R){
u <- rnorm(N, 0, sigma)
v <- (u / sigma) * rho + rnorm(N, 0, 1) * sqrt(1 - rho^2)
x <- Z %*% pi + v
y <- x %*% beta + u
b_OLS[i] <- as.numeric(coef(lm(y ~ x))[2])
b_2SLS[i] <- solve(t(x) %*% Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% x) %*% t(x) %*% Z %*% solve(t(Z) %*% Z) %*%
t(Z) %*% y
e <- y - x %*% b_2SLS[i]
}
mean(e)
library(tidyverse)
library(installr)
install.packages("installr")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("dplyr")
library(tidyverse)
install.packages("tidyverse")
install.packages("tm")
install.packages("mgcv")
install.packages("readr")
install.packages("RCurl")
knitr::opts_chunk$set(echo = F,	message = FALSE,warning = FALSE)
library(tidyverse)
ggplot(data = iris, aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.2, col = "black", size = 1) +
labs(x = "Sepal width", y = "Frequency", title = "Histogram of Sepal width")
knitr::opts_chunk$set(echo = F,	message = FALSE,warning = FALSE)
ggplot(data = iris, aes(x = Sepal.Length, fill = Species, col = Species)) +
geom_density(alpha = 0.5, size = 0.5) +
labs(x = "Sepal length", y = "Density", title = "Iris dataset:
Smoothed density of Sepal Length per Species")
knitr::opts_chunk$set(echo = F,	message = FALSE,warning = FALSE)
ggplot(data = iris, aes(x = Sepal.Length, y = iris$Sepal.Width)) +
geom_point(aes(x = iris$Sepal.Length, y = iris$Sepal.Width, fill = iris$Species,
col = iris$Species, shape = iris$Species),
size = 2) +
geom_smooth(method = lm, aes(x = iris$Sepal.Length,
y = iris$Sepal.Width, col = iris$Species)) +
labs(x = "Sepal length", y = "Sepal Width", title = "Scatterplot with smoothers")
library(tm)
getSources()
setwd()
setwd()
setwd("~/UvA/Subjects/Machine Learning for Econometrics/Lab sessions/Week3")
# function for data generation
myFunc <- function(n){
x <- runif(n, min=-1, max=1)
error <- rnorm(n, mean=0, sd=0.2)
target <- (-0.3+0.5*x)+error
df <- data.frame(target,x)
return(df)
}
set.seed(12345678)
myValues <- myFunc(1000)
ggplot(myValues, aes(x=x, y=target)) + geom_point(shape=1)
# Lab session 3
library(tidyverse)
ggplot(myValues, aes(x=x, y=target)) + geom_point(shape=1)
# specifying OLS
olsSolution <- function(mydata){
mydata <- cbind(intercept=rep(1, nrow(mydata)), mydata)
train_data <-unname(as.matrix(mydata[,-2]))
w_ols=(solve(t(train_data) %*% train_data) %*% t(train_data)) %*% mydata[[2]]
predic_values = (w_ols[2,1] * myValues[[2]]) + w_ols[1,1]
resid_values =  (predic_values-myValues[[1]])
return(list=c(w_0=w_ols[1,1], w_1=w_ols[2,1], sd_res=sd(resid_values)))
}
lm_ols<- olsSolution(myValues)
# specifying OLS
olsSolution <- function(mydata){
mydata <- cbind(intercept = rep(1, nrow(mydata)), mydata)
train_data <- unname(as.matrix(mydata[, -2]))
w_ols <- (solve(t(train_data) %*% train_data) %*% t(train_data)) %*% mydata[[2]]
predic_values <- (w_ols[2, 1] * myValues[[2]]) + w_ols[1, 1]
resid_values <-  (predic_values-myValues[[1]])
return(list = c(w_0 = w_ols[1, 1], w_1 = w_ols[2, 1], sd_res = sd(resid_values)))
}
lm_ols <- olsSolution(myValues)
print(lm_ols)
# again OLS by lm in R
rSolution <- function(mydata){
reg_model <- lm(target ~ x, data = mydata)
return(list = c(w_0 = unname(coefficients(reg_model)[1]),
w_1 = unname(coefficients(reg_model)[2]),
sd_res = sd(residuals(reg_model))))
}
lm_r <- rSolution(myValues)
print(lm_r)
# doing this by ML
likelifunc <- function(estima,mydata){
n <- nrow(mydata)
w_0 <- estima[1]
w_1 <- estima[2]
beta_est <- estima[3]
coef <- c(w_0, w_1)
x <- unname(as.matrix(mydata[, -2]))
target <- mydata$target
res <- target - (x %*% coef)
logl <- n * 0.5 * log(beta_est) - n * 0.5 * log(2 * pi) -
beta_est * (sum(res^2)) * 0.5
return(-logl)
}
mlSolution <- function(mydata){
mydata <- cbind(intercept = rep(1, nrow(mydata)), mydata)
p <- optim(c(1, 1, 1), likelifunc, method = "BFGS", hessian = T, mydata = mydata)
return(list = c(w_0 = p$par[1], w_1 = p$par[2], sd_res = sqrt(1 / p$par[3])))
}
lm_ml <- mlSolution(myValues)
print(lm_ml)
logl <- n * 0.5 * log(beta_est) - n * 0.5 * log(2 * pi) -
beta_est * (sum(res^2))
# doing this by ML
likelifunc <- function(estima,mydata){
n <- nrow(mydata)
w_0 <- estima[1]
w_1 <- estima[2]
beta_est <- estima[3]
coef <- c(w_0, w_1)
x <- unname(as.matrix(mydata[, -2]))
target <- mydata$target
res <- target - (x %*% coef)
logl <- n * 0.5 * log(beta_est) - n * 0.5 * log(2 * pi) -
beta_est * (sum(res^2))
return(-logl)
}
mlSolution <- function(mydata){
mydata <- cbind(intercept = rep(1, nrow(mydata)), mydata)
p <- optim(c(1, 1, 1), likelifunc, method = "BFGS", hessian = T, mydata = mydata)
return(list = c(w_0 = p$par[1], w_1 = p$par[2], sd_res = sqrt(1 / p$par[3])))
}
lm_ml <- mlSolution(myValues)
print(lm_ml)
# doing it by gradient descent
sgdSolution <- function(estima, mydata, learning_rate){
new_w0 <- estima[1]
new_w1 <- estima[2]
grad_w0 <- function(obsx, predx){
return(-(obsx - predx))
}
grad_w1 <- function(obsx, predx, inputx){
return(-(inputx) * (obsx - predx))
}
for(obs in 1:nrow(mydata)){
pred_val <- sum(c(new_w0,new_w1) * c(1, mydata$x[obs]))
new_w0 <- new_w0 - learning_rate * grad_w0(mydata$target[obs], pred_val)
new_w1 <- new_w1 - learning_rate * grad_w1(mydata$target[obs], pred_val,
inputx = mydata$x[obs])
}
return(list = c(w_0 = new_w0, w_1 = new_w1))
}
lm_sgd <- sgdSolution(estima = c(1, 1), mydata = myValues, learning_rate = 0.01)
print(lm_sgd)
# regularized OLS
olsregSolution <- function(mydata, lambda){
mydata <- cbind(intercept = rep(1, nrow(mydata)), mydata)
train_data <- unname(as.matrix(mydata[, -2]))
w_ols_reg <- (solve(lambda * diag(2) + t(train_data) %*% train_data) %*%
t(train_data)) %*% mydata[[2]]
return(list(w_0 = w_ols_reg[1, 1], w_1 = w_ols_reg[2, 1]))
}
lmregular <- olsregSolution(mydata = myValues, lambda = 0.1)
print(lmregular)
# bayes regression
bayesSolution <- function(mydata, alpha, beta){
mydata <- unname(as.matrix(cbind(intercept = rep(1, nrow(mydata)), mydata)))
alphaI <- alpha * diag(1, 2)
for(obs in 2:nrow(mydata)){
S <- solve(alphaI + beta * t(mydata[1:obs, -2]) %*% mydata[1:obs, -2])
m <- as.vector(beta * S %*%  t(mydata[1:obs, -2]) %*% matrix(mydata[1:obs, 2]))
}
return(list(w_0 = m[1], w_1 = m[2]))
}
lm_br <- bayesSolution(mydata = myValues, alpha = 2, beta = 25)
print(lm_br)
compare_df_w1 <- data.frame(num_point=numeric(), ols=numeric(),ml=numeric(), sgd=numeric(),regular=numeric(),br=numeric())
for(k in seq(50, 1000, 5000)){
lm_ols <- olsSolution(myValues[1:k,])
lm_ml <- mlSolution(myValues[1:k,])
lm_sgd <- sgdSolution(estima = c(1, 1), mydata = myValues[1:k,],
learning_rate = 0.01)
lmregular <- olsregSolution(mydata = myValues[1:k,], lambda = 0.1)
lm_br <- bayesSolution(mydata = myValues[1:k,], alpha = 2, beta = 25)
compare_df_w0 <- rbind(compare_df_w0, data.frame(num_point = k,ols = lm_ols[1],
ml = lm_ml[1], sgd = lm_sgd[1],
regular = lmregular$w_0,
br = lm_br$w_0), make.row.names = F)
compare_df_w1 <- rbind(compare_df_w1,data.frame(num_point = k,ols = lm_ols[2],
ml = lm_ml[2],sgd = lm_sgd[2],
regular = lmregular$w_1,
br = lm_br$w_1), make.row.names=F)
}
head(compare_df_w1)
# comparison
compare_df_w0 <- data.frame(num_point = numeric(), ols = numeric(),
ml = numeric(), sgd = numeric(),
regular = numeric(),br = numeric())
compare_df_w1 <- data.frame(num_point = numeric(), ols = numeric(),
ml = numeric(), sgd = numeric(),
regular = numeric(),br = numeric())
for(k in seq(50, 1000, 5000)){
lm_ols <- olsSolution(myValues[1:k,])
lm_ml <- mlSolution(myValues[1:k,])
lm_sgd <- sgdSolution(estima = c(1, 1), mydata = myValues[1:k,],
learning_rate = 0.01)
lmregular <- olsregSolution(mydata = myValues[1:k,], lambda = 0.1)
lm_br <- bayesSolution(mydata = myValues[1:k,], alpha = 2, beta = 25)
compare_df_w0 <- rbind(compare_df_w0, data.frame(num_point = k,ols = lm_ols[1],
ml = lm_ml[1], sgd = lm_sgd[1],
regular = lmregular$w_0,
br = lm_br$w_0), make.row.names = F)
compare_df_w1 <- rbind(compare_df_w1,data.frame(num_point = k,ols = lm_ols[2],
ml = lm_ml[2],sgd = lm_sgd[2],
regular = lmregular$w_1,
br = lm_br$w_1), make.row.names=F)
}
head(compare_df_w1)
for(k in seq(50, 1000, 50)){
lm_ols <- olsSolution(myValues[1:k,])
lm_ml <- mlSolution(myValues[1:k,])
lm_sgd <- sgdSolution(estima = c(1, 1), mydata = myValues[1:k,],
learning_rate = 0.01)
lmregular <- olsregSolution(mydata = myValues[1:k,], lambda = 0.1)
lm_br <- bayesSolution(mydata = myValues[1:k,], alpha = 2, beta = 25)
compare_df_w0 <- rbind(compare_df_w0, data.frame(num_point = k,ols = lm_ols[1],
ml = lm_ml[1], sgd = lm_sgd[1],
regular = lmregular$w_0,
br = lm_br$w_0), make.row.names = F)
compare_df_w1 <- rbind(compare_df_w1,data.frame(num_point = k,ols = lm_ols[2],
ml = lm_ml[2],sgd = lm_sgd[2],
regular = lmregular$w_1,
br = lm_br$w_1), make.row.names=F)
}
compare_df_w1
View(compare_df_w1)
install.packages("profvis")
